{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9426131,"sourceType":"datasetVersion","datasetId":5725956},{"sourceId":11371268,"sourceType":"datasetVersion","datasetId":7118635}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **NoteBook Summary**\n\nThis notebook focuses on sampling a subset of videos from the UCF-Crime dataset to create a smaller, manageable dataset for experimentation or training. It begins by loading annotation JSON files for the train, validation, and test sets, then merges them into a unified annotation dictionary. The notebook identifies video files by category, either by scanning all available classes or specifically targeting “Normal” videos depending on the sampling logic. For each category, it randomly selects up to 120 videos (or fewer if less are available), and extracts the corresponding metadata from the combined annotations. These selected videos are copied into a single output directory, and their associated annotations are saved into a new JSON file. In addition, metadata is prepared to facilitate publishing the sampled dataset on Kaggle via the Kaggle API. This modular sampling and export framework is useful for creating compact versions of large video datasets while preserving category balance and caption alignment.\n\n\n                    ","metadata":{}},{"cell_type":"code","source":"# import os\n# import json\n# import random\n# import shutil\n# from collections import defaultdict\n\n# # --- Configuration Paths ---\n# VIDEO_DIR = \"/kaggle/input/ucaucf-crime-annotation-dataset/UCF_Crimes/UCF_Crimes/Videos\"\n# ANNOTATION_JSON_PATH = \"/kaggle/input/ucaucf-crime-annotation-dataset/UCFCrime_Train.json\"  # Adjust if different\n# OUTPUT_DIR = \"/kaggle/working/sampled_ucf_videos\"\n# OUTPUT_JSON_PATH =  \"sampled_annotations.json\"\n\n# # Optionally, set a seed for reproducibility:\n# random.seed(42)\n\n# # --- Load the Annotations JSON ---\n# with open(ANNOTATION_JSON_PATH, \"r\") as f:\n#     annotations = json.load(f)\n\n# # --- Organize Videos by Category ---\n# # This dictionary maps category to a list of video keys from the annotations file.\n# # It assumes the video names start with the category name.\n# category_videos = defaultdict(list)\n# available_categories = os.listdir(VIDEO_DIR)\n# for video_name in annotations:\n#     for category in available_categories:\n#         if video_name.startswith(category):\n#             category_videos[category].append(video_name)\n#             break\n\n# # --- Sampling and Copying Videos ---\n# # Create output directory if it doesn't already exist.\n# os.makedirs(OUTPUT_DIR, exist_ok=True)\n# sampled_data = {}\n\n# for category, videos in category_videos.items():\n#     # Sample 50 videos from each category (or all videos if fewer than 50)\n#     sample_count = min(50, len(videos))\n#     sampled = random.sample(videos, sample_count)\n    \n#     for video_name in sampled:\n#         # Adjust the extension if needed; here, we assume .mp4.\n#         video_file = video_name + \".mp4\"\n#         # The source path is in a subfolder named by its category.\n#         src_video_path = os.path.join(VIDEO_DIR, category, video_file)\n#         # The destination is a single output folder (no subfolders).\n#         dst_video_path = os.path.join(OUTPUT_DIR, video_file)\n        \n#         if os.path.exists(src_video_path):\n#             shutil.copy2(src_video_path, dst_video_path)\n#             # Save the video's metadata from the original annotations.\n#             sampled_data[video_name] = annotations[video_name]\n#         else:\n#             print(f\"Warning: Video file not found: {src_video_path}\")\n\n# # --- Save the Sampled Annotations to a New JSON File ---\n# with open(OUTPUT_JSON_PATH, \"w\") as out_json:\n#     json.dump(sampled_data, out_json, indent=4)\n\n# print(f\"✅ Sampling complete! All videos saved in: {OUTPUT_DIR}\")\n# print(f\"✅ New JSON annotations file created at: {OUTPUT_JSON_PATH}\")\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-11T17:35:39.827983Z","iopub.execute_input":"2025-04-11T17:35:39.828329Z","iopub.status.idle":"2025-04-11T17:40:04.888698Z","shell.execute_reply.started":"2025-04-11T17:35:39.828303Z","shell.execute_reply":"2025-04-11T17:40:04.887488Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# import shutil\n\n# # Replace with the path you want to delete\n# folder_path = \"/kaggle/working/sampled_ucf_videos\"\n\n# shutil.rmtree(folder_path)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:58:58.434106Z","iopub.execute_input":"2025-04-11T21:58:58.434793Z","iopub.status.idle":"2025-04-11T21:58:58.906243Z","shell.execute_reply.started":"2025-04-11T21:58:58.434762Z","shell.execute_reply":"2025-04-11T21:58:58.905217Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport json\nimport random\nimport shutil\n\n# --- Config Paths ---\nVIDEO_DIR = \"/kaggle/input/ucaucf-crime-annotation-dataset/UCF_Crimes/UCF_Crimes/Videos\"\nTRAIN_JSON_PATH = \"/kaggle/input/ucaucf-crime-annotation-dataset/UCFCrime_Train.json\"\nVAL_JSON_PATH   = \"/kaggle/input/ucaucf-crime-annotation-dataset/UCFCrime_Val.json\"\nTEST_JSON_PATH  = \"/kaggle/input/ucaucf-crime-annotation-dataset/UCFCrime_Test.json\"\n\nOUTPUT_DIR = \"/kaggle/working/normal_only_videos\"\nOUTPUT_JSON_PATH = os.path.join(OUTPUT_DIR, \"normal_sampled_annotations.json\")\n\nrandom.seed(42)\n\n# --- Load Combined Annotations ---\nannotations = {}\nfor json_path in [TRAIN_JSON_PATH, VAL_JSON_PATH, TEST_JSON_PATH]:\n    with open(json_path, \"r\") as f:\n        annotations.update(json.load(f))\n\n# --- Find All \"Normal\" Videos in All Subfolders ---\nnormal_videos = []\nfor root, dirs, files in os.walk(VIDEO_DIR):\n    for file in files:\n        if file.startswith(\"Normal\") and file.endswith(\".mp4\"):\n            video_name = os.path.splitext(file)[0]  # strip .mp4\n            full_path = os.path.join(root, file)\n            if video_name in annotations:\n                normal_videos.append((video_name, full_path))\n\n# --- Sample 50 Normal Videos ---\nsampled = random.sample(normal_videos, min(120, len(normal_videos)))\n\n# --- Copy Videos + Save Annotations ---\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nsampled_annotations = {}\n\nfor video_name, src_path in sampled:\n    dst_path = os.path.join(OUTPUT_DIR, os.path.basename(src_path))\n    # shutil.copy2(src_path, dst_path)\n    sampled_annotations[video_name] = annotations[video_name]\n\n# --- Save JSON ---\nwith open(OUTPUT_JSON_PATH, \"w\") as out_file:\n    json.dump(sampled_annotations, out_file, indent=4)\n\nprint(f\"✅ Sampled 50 'Normal' videos and saved them to: {OUTPUT_DIR}\")\nprint(f\"✅ Corresponding annotation JSON written to: {OUTPUT_JSON_PATH}\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\ndataset_name = \"ucf-mini\"\n\n# os.makedirs('/kaggle/working/' + dataset_name, exist_ok=True)\n\n# # Move the folder inside the dataset directory\n# shutil.move(\"/kaggle/working/UCF-mini-dataset/sampled_annotations.json\", \"/kaggle/working/UCF-mini-dataset/{dataset_name}\")\n\n# Create the metadata file\nmetadata = f\"\"\"\n{{\n  \"title\": \"{dataset_name}\",\n  \"id\": \"nourfakih/{dataset_name}\",\n  \"licenses\": [{{\"name\": \"CC0-1.0\"}}]\n}}\n\"\"\"\n\nwith open(\"/kaggle/working/normal_only_videos/dataset-metadata.json\", \"w\") as f:\n    f.write(metadata)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:54:45.192867Z","iopub.execute_input":"2025-04-11T21:54:45.193244Z","iopub.status.idle":"2025-04-11T21:54:45.200547Z","shell.execute_reply.started":"2025-04-11T21:54:45.193216Z","shell.execute_reply":"2025-04-11T21:54:45.199508Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!kaggle datasets version -p /kaggle/working/normal_only_videos -m \"Updated video files\"\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:54:48.263623Z","iopub.execute_input":"2025-04-11T21:54:48.263986Z","iopub.status.idle":"2025-04-11T21:55:32.945511Z","shell.execute_reply.started":"2025-04-11T21:54:48.263963Z","shell.execute_reply":"2025-04-11T21:55:32.944311Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport json\nimport random\nimport shutil\nfrom collections import defaultdict\n\n# --- Configuration Paths ---\n# Path to video files (each category is expected to be a subfolder under this directory)\nVIDEO_DIR = \"/kaggle/input/ucaucf-crime-annotation-dataset/UCF_Crimes/UCF_Crimes/Videos\"\n\n# Paths to the three annotation JSON files\nTRAIN_JSON_PATH = \"/kaggle/input/ucaucf-crime-annotation-dataset/UCFCrime_Train.json\"\nVAL_JSON_PATH   = \"/kaggle/input/ucaucf-crime-annotation-dataset/UCFCrime_Val.json\"\nTEST_JSON_PATH  = \"/kaggle/input/ucaucf-crime-annotation-dataset/UCFCrime_Test.json\"\n\n# Output folder path and JSON file for the sampled annotations\nOUTPUT_DIR = \"/kaggle/working/sampled_ucf_videos\"\nOUTPUT_JSON_PATH =  \"/kaggle/working/sampled_ucf_videos/sampled_annotations.json\"\n\n# Optionally, set a seed for reproducibility:\nrandom.seed(42)\n\n# --- Load and Combine Annotations ---\nannotations = {}\nfor json_path in [TRAIN_JSON_PATH, VAL_JSON_PATH, TEST_JSON_PATH]:\n    with open(json_path, \"r\") as f:\n        data = json.load(f)\n        # The keys in each file should be unique. In case of overlap, later files will override earlier ones.\n        annotations.update(data)\n\n# --- Organize Videos by Category ---\n# This dictionary will map each category (inferred from the video filename prefix)\n# to the list of video names that belong to that category.\ncategory_videos = defaultdict(list)\navailable_categories = os.listdir(VIDEO_DIR)\n\nfor video_name in annotations:\n    for category in available_categories:\n        # Checking if the video name begins with the category name\n        if video_name.startswith(category):\n            category_videos[category].append(video_name)\n            break\n\n# --- Sampling and Copying Videos ---\n# Create output folder if it doesn't already exist\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nsampled_data = {}\n\nfor category, videos in category_videos.items():\n    # Sample 50 videos from each category (or all videos if fewer than 50 exist)\n    sample_count = min(120, len(videos))\n    sampled = random.sample(videos, sample_count)\n    \n    for video_name in sampled:\n        # Adjust the file extension if needed; here, we assume videos are .mp4\n        video_file = video_name + \".mp4\"\n        # The source path is built from the category subfolder inside VIDEO_DIR\n        src_video_path = os.path.join(VIDEO_DIR, category, video_file)\n        # All videos will be copied directly into OUTPUT_DIR (no category subfolders)\n        dst_video_path = os.path.join(OUTPUT_DIR, video_file)\n        \n        if os.path.exists(src_video_path):\n            # shutil.copy2(src_video_path, dst_video_path)\n            # Add the video's metadata from the combined annotations\n            sampled_data[video_name] = annotations[video_name]\n        else:\n            print(f\"Warning: Video file not found: {src_video_path}\")\n\n# --- Save the Sampled Annotations to a New JSON File ---\nwith open(OUTPUT_JSON_PATH, \"w\") as out_json:\n    json.dump(sampled_data, out_json, indent=4)\n\nprint(f\"✅ Sampling complete! All videos are saved in: {OUTPUT_DIR}\")\nprint(f\"✅ New JSON annotations file created at: {OUTPUT_JSON_PATH}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:59:05.721585Z","iopub.execute_input":"2025-04-11T21:59:05.721993Z","iopub.status.idle":"2025-04-11T22:02:50.189617Z","shell.execute_reply.started":"2025-04-11T21:59:05.721971Z","shell.execute_reply":"2025-04-11T22:02:50.188229Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"OUTPUT_JSON_PATH =  \"sampled_annotations.json\"\n# --- Save the Sampled Annotations to a New JSON File ---\nwith open(OUTPUT_JSON_PATH, \"w\") as out_json:\n    json.dump(sampled_data, out_json, indent=4)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T22:02:50.941928Z","iopub.execute_input":"2025-04-11T22:02:50.942631Z","iopub.status.idle":"2025-04-11T22:02:50.994114Z","shell.execute_reply.started":"2025-04-11T22:02:50.9426Z","shell.execute_reply":"2025-04-11T22:02:50.993281Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install -q kaggle","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T20:25:36.475484Z","iopub.execute_input":"2025-04-11T20:25:36.475852Z","iopub.status.idle":"2025-04-11T20:25:41.684278Z","shell.execute_reply.started":"2025-04-11T20:25:36.475823Z","shell.execute_reply":"2025-04-11T20:25:41.683023Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import json\nimport os\n\n# Save kaggle.json in ~/.kaggle/\nwith open('/kaggle/working/kaggle.json', 'w') as f:\n    json.dump({\"username\":\"nourfakih\",\"key\":\"0005ac45aa3dc353c01a5d486ed0a5ac\"}, f)\n\nos.environ['KAGGLE_CONFIG_DIR'] = \"/kaggle/working\"\n\n!mkdir -p ~/.kaggle\n!cp /kaggle/working/kaggle.json ~/.kaggle/\n!chmod 600 ~/.kaggle/kaggle.json\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T22:02:50.581141Z","iopub.execute_input":"2025-04-11T22:02:50.581456Z","iopub.status.idle":"2025-04-11T22:02:50.939397Z","shell.execute_reply.started":"2025-04-11T22:02:50.581429Z","shell.execute_reply":"2025-04-11T22:02:50.938187Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\ndataset_name = \"sampled-ucf-dataset\"\n\n# os.makedirs('/kaggle/working/' + dataset_name, exist_ok=True)\n\n# # Move the folder inside the dataset directory\n# shutil.move(\"/kaggle/working/UCF-mini-dataset/sampled_annotations.json\", \"/kaggle/working/UCF-mini-dataset/{dataset_name}\")\n\n# Create the metadata file\nmetadata = f\"\"\"\n{{\n  \"title\": \"{dataset_name}\",\n  \"id\": \"nourfakih/{dataset_name}\",\n  \"licenses\": [{{\"name\": \"CC0-1.0\"}}]\n}}\n\"\"\"\n\nwith open(\"/kaggle/working/sampled_ucf_videos/dataset-metadata.json\", \"w\") as f:\n    f.write(metadata)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T22:25:46.247741Z","iopub.execute_input":"2025-04-11T22:25:46.249046Z","iopub.status.idle":"2025-04-11T22:25:46.25668Z","shell.execute_reply.started":"2025-04-11T22:25:46.249002Z","shell.execute_reply":"2025-04-11T22:25:46.255713Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!kaggle datasets create -p /kaggle/working/sampled_ucf_videos \n                    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T22:25:49.010995Z","iopub.execute_input":"2025-04-11T22:25:49.011293Z","iopub.status.idle":"2025-04-11T22:32:12.292627Z","shell.execute_reply.started":"2025-04-11T22:25:49.011274Z","shell.execute_reply":"2025-04-11T22:32:12.291584Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!kaggle datasets create -p /kaggle/working/UCF-mini-dataset/{dataset_name} ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:08:11.052973Z","iopub.execute_input":"2025-04-11T21:08:11.05335Z","iopub.status.idle":"2025-04-11T21:14:43.15906Z","shell.execute_reply.started":"2025-04-11T21:08:11.053325Z","shell.execute_reply":"2025-04-11T21:14:43.157768Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[],"execution_count":null}]}